using System;
using System.Windows.Forms;
using System.IO;
using Neopocket.Utils;

namespace Neopocket.Forms
{
    /// <summary>
    /// Formulário de autenticação de um usuário no sistema NeoPocket
    /// </summary>
    public partial class FrmLogin : FormBase
    {
        #region [ Construtor ]

        public FrmLogin()
        {
            InitializeComponent();

            if (!Directory.Exists(Globals.APP_LOGDIRECTORY))
                Directory.CreateDirectory(Globals.APP_LOGDIRECTORY);

            if (!this.ExisteArquivos())
            {
                if (Util.FormDialogExibir(new FrmConfiguracaoDeAcesso()) == DialogResult.OK)
                {
                    // Iniciou as configurações
                }
                else
                {
                    this.Close();
                    return;
                }
            }

            this.CarregarArquivos();

            try
            {
                Globals.Funcionario.Carregar();
            }
            catch (Exception ex)
            {
                LogBuilder.Append(Globals.APP_LOGDIRECTORY + Globals.APP_LOG_EXCEPTIONFILENAME, ex.Message, true);
                FE.Show(ex);
            }
        }

        #endregion

        #region [ Sair ]

        private void picSair_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void mniSair_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        #endregion

        #region [ Entrar ]

        private void btnEntrar_Click(object sender, EventArgs e)
        {
            this.Entrar();
        }

        private void pbEntrar_Click(object sender, EventArgs e)
        {
            this.Entrar();
        }

        /// <summary>
        /// Método responsável por realizar o login no NeoPocket
        /// </summary>
        protected void Entrar()
        {
            //No futuro melhorar esse método de autenticação
            if (txtNome.Text == Globals.APP_USER_NAME && txtSenha.Text == Globals.APP_USER_PASS)
            {
                Util.FormExibir(new FrmPrincipal());

                // Limpa os campos
                this.txtNome.Text = String.Empty;
                this.txtSenha.Text = String.Empty;
            }
            else
            {
                MessageBox.Show("Usuário ou senha incorreto", "Neo");
            }
        }

        #endregion

        #region [ Configurações de acesso ]

        private void picConfiguracoesDeAcesso_Click(object sender, EventArgs e)
        {
            Util.FormExibir(new FrmConfiguracaoDeAcesso());
        }

        #endregion

        #region [ Focus dos campos ]

        private void FrmLogin_GotFocus(object sender, EventArgs e)
        {
            inputPanel.Enabled = false;
        }

        private void txtNome_GotFocus(object sender, EventArgs e)
        {
            inputPanel.Enabled = true;
        }

        private void txtSenha_GotFocus(object sender, EventArgs e)
        {
            inputPanel.Enabled = true;
        }

        #endregion

        #region [ Load ]

        private void FrmLogin_Load(object sender, EventArgs e)
        {
            inputPanel.Enabled = false;
        }

        #endregion

        #region [ Checagem de arquivos básicos ]

        /// <summary>
        /// Método responsável por verificar a existência dos arquivos necessários para 
        /// o funcionamento do NeoPocket.
        /// </summary>
        /// <returns>Boolean - True se existem todos arquivo ou False se algum arquivo não existe</returns>
        protected Boolean ExisteArquivos()
        {
            Boolean arquivoNaoEncontrado = true;

            if (!File.Exists(Globals.APP_PATH + "usuario.dat"))
                arquivoNaoEncontrado = false;

            if (!File.Exists(Globals.APP_PATH + "senha.seg"))
                arquivoNaoEncontrado = false;

            if (!File.Exists(Globals.APP_PATH + "ftpusuario.dat"))
                arquivoNaoEncontrado = false;

            if (!File.Exists(Globals.APP_PATH + "ftpcaminho.dat"))
                arquivoNaoEncontrado = false;

            if (!File.Exists(Globals.APP_PATH + "vendedornome.dat"))
                arquivoNaoEncontrado = false;

            if (!File.Exists(Globals.APP_PATH + "vendedorcodigo.seg"))
                arquivoNaoEncontrado = false;

            return arquivoNaoEncontrado;
        }

        #endregion

        #region [ Carrega os arquivos ]

        /// <summary>
        /// Carrega os valores que estão contidos nos arquivos de configuração.
        /// </summary>
        protected void CarregarArquivos()
        {
            try
            {
                StreamReader sr = new StreamReader(Globals.APP_PATH + "usuario.dat");
                Globals.APP_USER_NAME = sr.ReadLine();
                sr.Close();

                sr = new StreamReader(Globals.APP_PATH + "senha.seg");
                Globals.APP_USER_PASS = Crypt.Transform(sr.ReadLine());
                sr.Close();
                sr = new StreamReader(Globals.APP_PATH + "ftpusuario.dat");
                Globals.APP_FTP_USER = sr.ReadLine();
                sr.Close();

                sr = new StreamReader(Globals.APP_PATH + "ftpcaminho.dat");
                Fcn.DeEnderecoParaVariaveisFTP(sr.ReadLine());
                sr.Close();

                sr = new StreamReader(Globals.APP_PATH + "ftpsenha.seg");
                Globals.APP_FTP_PASS = Crypt.Transform(sr.ReadLine());
                sr.Close();

                sr = new StreamReader(Globals.APP_PATH + "vendedornome.dat");
                Globals.Funcionario.Nome = sr.ReadLine();
                sr.Close();

                sr = new StreamReader(Globals.APP_PATH + "vendedorcodigo.seg");
                String codigoCriptografado = Crypt.Transform(sr.ReadLine());
                if (!String.IsNullOrEmpty(codigoCriptografado))
                    Globals.Funcionario.Id = Convert.ToInt32(codigoCriptografado);
                sr.Close();
            }
            catch (Exception ex)
            {
                LogBuilder.Append(Globals.APP_LOGDIRECTORY + Globals.APP_LOG_EXCEPTIONFILENAME, ex.Message, true);
                FE.Show(ex);
            }
        }

        #endregion
    }
}